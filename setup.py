import subprocess
import base64
import time
import sys
import os


# base64 encoded string of larger script used to apply images as icons to a file on Mac
FILEICON = ""


class CommandError(Exception):
    def __init__(self, message):
        super(CommandError, self).__init__(message)


def command(cmd):
    out = subprocess.getstatusoutput(cmd)
    time.sleep(2)
    if out[0] == 0:
        return out[1]
    else:
        raise CommandError(f'Command Error: {out[1]}')


def python_version():
    ver = sys.version_info
    version = f'{ver.major}.{ver.minor}.{ver.micro}'
    if ver.major != 3:
        raise CommandError(f'Incorrect Python version installed: {version}')
    if ver.minor < 6:
        raise CommandError(f'Incorrect Python version installed: {version}')
    keyword = 'python3'
    pip = 'pip3'
    try:
        command('python3 -V')
    except CommandError:
        keyword = 'python'
        pip = 'pip'
        command('python -V')
    return keyword, pip


class MacSetup:
    def __init__(self):
        if os.path.isdir('mac_run'):
            print('Already ran setup.py')
            return
        os.makedirs('mac_run')
        versions = python_version()
        self.python = versions[0]
        self.pip = versions[1]
        self.current_directory = os.getcwd()
        self.desktop = os.path.join(os.path.join(os.path.expanduser('~')), 'Desktop')
        self.install_dependencies()
        self.make_command()
        self.make_fileicon()
        self.make_shortcut()
        self.cleanup()

    def install_dependencies(self):
        command(f'{self.pip} install eel pydexcom')
        time.sleep(0.2)
        command(f'cd {self.current_directory}')
        time.sleep(0.2)
        command('npm install electron')
        time.sleep(0.2)

    def make_command(self):
        with open('mac_run/d4d.command', 'w') as f:
            shebang = '#!/usr/bin/env bash'
            tellm = 'tell application "Terminal"'
            setm = 'set miniaturized of'
            window = '(first window whose name contains "d4d")'
            f.write(f'{shebang}\nosascript <<END_SCRIPT\n{tellm}\n{setm} {window} to true\nend tell\ndo shell script "cd {self.current_directory} && {self.python} dexcom4desktop.py"\n{tellm}\n{setm} {window} to false\nend tell\nEND_SCRIPT')
        time.sleep(0.2)
        command('chmod +x mac_run/d4d.command')

    def make_fileicon(self):
        base64_bytes = FILEICON.encode("ascii")
        string_bytes = base64.b64decode(base64_bytes)
        normal_string = string_bytes.decode("ascii")
        with open('fileicon', 'w') as f:
            f.write(normal_string)
        command('chmod +x fileicon')
        command('./fileicon set mac_run/d4d.command web/dexcom.png')

    def make_shortcut(self):
        command(f"""osascript -e 'tell application "Finder"' -e 'make new alias to file (posix file "{self.current_directory}/mac_run/d4d.command") at desktop' -e 'end tell'""")
        os.rename(f"{self.desktop}/d4d.command", f"{self.desktop}/d4d_alias.command")

    def cleanup(self):
        os.remove('fileicon')
        command(f"""osascript -e 'tell application "Finder"' -e 'move POSIX file "{self.desktop}/d4d_alias.command" to POSIX file "{self.current_directory}"' -e 'end tell'""")
        os.rename('d4d_alias.command', 'Dexcom 4 Desktop')


class WindowsSetup:
    def __init__(self):
        if os.path.isdir('windows_run'):
            print('Already ran setup.py')
            return
        os.makedirs('windows_run')
        versions = python_version()
        self.python = versions[0]
        self.pip = versions[1]
        self.current_directory = os.getcwd()
        self.install_dependencies()
        self.make_bat()
        self.make_vbs()
        self.make_shortcut()

    def install_dependencies(self):
        command(f'{self.pip} install eel pydexcom')
        time.sleep(0.2)
        command(f'cd {self.current_directory}')
        time.sleep(0.2)
        command('npm install electron')
        time.sleep(0.2)

    def make_bat(self):
        with open('windows_run/d4d.bat', 'w') as f:
            f.write(f'@echo off\ncd {self.current_directory}\n{self.python} dexcom4desktop.py %*')
        time.sleep(0.2)

    def make_vbs(self):
        with open('windows_run/d4d.vbs', 'w') as f:
            f.write(f'CreateObject("Wscript.Shell").Run "{self.current_directory}\\windows_run\\d4d.bat",0,True')
        time.sleep(0.2)

    def make_shortcut(self):
        with open('CreateShortcut.vbs', 'w') as f:
            f.write(f'Set oWS = WScript.CreateObject("WScript.Shell")\nsLinkFile = "{self.current_directory}\\d4d.lnk"\nSet oLink = oWS.CreateShortcut(sLinkFile)\noLink.TargetPath = "{self.current_directory}\\windows_run\\d4d.vbs"\noLink.IconLocation = "{self.current_directory}\\web\\dexcom.ico, 0"\noLink.Save')
        time.sleep(0.2)
        command('start CreateShortcut.vbs')
        time.sleep(0.2)
        os.remove('CreateShortcut.vbs')
        time.sleep(0.2)
        os.rename('d4d.lnk', 'Dexcom 4 Desktop.lnk')


def setup():
    platform = sys.platform
    if platform == 'darwin':
        MacSetup()
    if platform == 'win32':
        WindowsSetup()


if __name__ == '__main__':
    setup()
